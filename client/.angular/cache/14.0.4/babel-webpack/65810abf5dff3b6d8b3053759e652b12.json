{"ast":null,"code":"/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null'; // YAML spec allows non-reserved URI characters in tags.\n\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+'; // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n\n  const KEY = {\n    className: 'attr',\n    variants: [{\n      begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n    }, {\n      // double quoted keys\n      begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n    }, {\n      // single quoted keys\n      begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n    }]\n  };\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [{\n      // jinja templates Ansible\n      begin: /\\{\\{/,\n      end: /\\}\\}/\n    }, {\n      // Ruby i18n\n      begin: /%\\{/,\n      end: /\\}/\n    }]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /\\S+/\n    }],\n    contains: [hljs.BACKSLASH_ESCAPE, TEMPLATE_VARIABLES]\n  }; // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n\n  const CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [{\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /[^\\s,{}[\\]]+/\n    }]\n  });\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [VALUE_CONTAINER],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const MODES = [KEY, {\n    className: 'meta',\n    begin: '^---\\\\s*$',\n    relevance: 10\n  }, {\n    // multi line string\n    // Blocks start with a | or > followed by a newline\n    //\n    // Indentation of subsequent lines must be the same to\n    // be considered part of the block\n    className: 'string',\n    begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n  }, {\n    // Ruby/Rails erb\n    begin: '<%[%=-]?',\n    end: '[%-]?%>',\n    subLanguage: 'ruby',\n    excludeBegin: true,\n    excludeEnd: true,\n    relevance: 0\n  }, {\n    // named tags\n    className: 'type',\n    begin: '!\\\\w+!' + URI_CHARACTERS\n  }, // https://yaml.org/spec/1.2/spec.html#id2784064\n  {\n    // verbatim tags\n    className: 'type',\n    begin: '!<' + URI_CHARACTERS + \">\"\n  }, {\n    // primary tags\n    className: 'type',\n    begin: '!' + URI_CHARACTERS\n  }, {\n    // secondary tags\n    className: 'type',\n    begin: '!!' + URI_CHARACTERS\n  }, {\n    // fragment id &ref\n    className: 'meta',\n    begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // fragment reference *ref\n    className: 'meta',\n    begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n  }, {\n    // array listing\n    className: 'bullet',\n    // TODO: remove |$ hack when we have proper look-ahead support\n    begin: '-(?=[ ]|$)',\n    relevance: 0\n  }, hljs.HASH_COMMENT_MODE, {\n    beginKeywords: LITERALS,\n    keywords: {\n      literal: LITERALS\n    }\n  }, TIMESTAMP, // numbers are any valid C-style number that\n  // sit isolated from other words\n  {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE + '\\\\b',\n    relevance: 0\n  }, OBJECT, ARRAY, STRING];\n  const VALUE_MODES = [...MODES];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: ['yml'],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;","map":{"version":3,"names":["yaml","hljs","LITERALS","URI_CHARACTERS","KEY","className","variants","begin","TEMPLATE_VARIABLES","end","STRING","relevance","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","DATE_RE","TIME_RE","FRACTION_RE","ZONE_RE","TIMESTAMP","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/yaml.js"],"sourcesContent":["/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null';\n\n  // YAML spec allows non-reserved URI characters in tags.\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  const KEY = {\n    className: 'attr',\n    variants: [\n      { begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)' },\n      { // double quoted keys\n        begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)' },\n      { // single quoted keys\n        begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)' }\n    ]\n  };\n\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { // jinja templates Ansible\n        begin: /\\{\\{/,\n        end: /\\}\\}/\n      },\n      { // Ruby i18n\n        begin: /%\\{/,\n        end: /\\}/\n      }\n    ]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      { begin: /\\S+/ }\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n  const CONTAINER_STRING = hljs.inherit(STRING, { variants: [\n    {\n      begin: /'/,\n      end: /'/\n    },\n    {\n      begin: /\"/,\n      end: /\"/\n    },\n    { begin: /[^\\s,{}[\\]]+/ }\n  ] });\n\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n\n  const MODES = [\n    KEY,\n    {\n      className: 'meta',\n      begin: '^---\\\\s*$',\n      relevance: 10\n    },\n    { // multi line string\n      // Blocks start with a | or > followed by a newline\n      //\n      // Indentation of subsequent lines must be the same to\n      // be considered part of the block\n      className: 'string',\n      begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n    },\n    { // Ruby/Rails erb\n      begin: '<%[%=-]?',\n      end: '[%-]?%>',\n      subLanguage: 'ruby',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    },\n    { // named tags\n      className: 'type',\n      begin: '!\\\\w+!' + URI_CHARACTERS\n    },\n    // https://yaml.org/spec/1.2/spec.html#id2784064\n    { // verbatim tags\n      className: 'type',\n      begin: '!<' + URI_CHARACTERS + \">\"\n    },\n    { // primary tags\n      className: 'type',\n      begin: '!' + URI_CHARACTERS\n    },\n    { // secondary tags\n      className: 'type',\n      begin: '!!' + URI_CHARACTERS\n    },\n    { // fragment id &ref\n      className: 'meta',\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // fragment reference *ref\n      className: 'meta',\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // array listing\n      className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '-(?=[ ]|$)',\n      relevance: 0\n    },\n    hljs.HASH_COMMENT_MODE,\n    {\n      beginKeywords: LITERALS,\n      keywords: { literal: LITERALS }\n    },\n    TIMESTAMP,\n    // numbers are any valid C-style number that\n    // sit isolated from other words\n    {\n      className: 'number',\n      begin: hljs.C_NUMBER_RE + '\\\\b',\n      relevance: 0\n    },\n    OBJECT,\n    ARRAY,\n    STRING\n  ];\n\n  const VALUE_MODES = [ ...MODES ];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: [ 'yml' ],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}