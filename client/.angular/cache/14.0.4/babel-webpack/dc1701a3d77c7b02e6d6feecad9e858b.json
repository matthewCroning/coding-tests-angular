{"ast":null,"code":"/*\nLanguage: Stan\nDescription: The Stan probabilistic programming language\nAuthor: Sean Pinkney <sean.pinkney@gmail.com>\nWebsite: http://mc-stan.org/\nCategory: scientific\n*/\nfunction stan(hljs) {\n  const regex = hljs.regex; // variable names cannot conflict with block identifiers\n\n  const BLOCKS = ['functions', 'model', 'data', 'parameters', 'quantities', 'transformed', 'generated'];\n  const STATEMENTS = ['for', 'in', 'if', 'else', 'while', 'break', 'continue', 'return'];\n  const TYPES = ['array', 'complex', 'int', 'real', 'vector', 'ordered', 'positive_ordered', 'simplex', 'unit_vector', 'row_vector', 'matrix', 'cholesky_factor_corr|10', 'cholesky_factor_cov|10', 'corr_matrix|10', 'cov_matrix|10', 'void']; // to get the functions list\n  // clone the [stan-docs repo](https://github.com/stan-dev/docs)\n  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf\n  //\n  // the output files are\n  // distributions_quoted.txt\n  // functions_quoted.txt\n\n  const FUNCTIONS = ['Phi', 'Phi_approx', 'abs', 'acos', 'acosh', 'add_diag', 'algebra_solver', 'algebra_solver_newton', 'append_array', 'append_col', 'append_row', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'bessel_first_kind', 'bessel_second_kind', 'binary_log_loss', 'binomial_coefficient_log', 'block', 'cbrt', 'ceil', 'chol2inv', 'cholesky_decompose', 'choose', 'col', 'cols', 'columns_dot_product', 'columns_dot_self', 'conj', 'cos', 'cosh', 'cov_exp_quad', 'crossprod', 'csr_extract_u', 'csr_extract_v', 'csr_extract_w', 'csr_matrix_times_vector', 'csr_to_dense_matrix', 'cumulative_sum', 'determinant', 'diag_matrix', 'diag_post_multiply', 'diag_pre_multiply', 'diagonal', 'digamma', 'dims', 'distance', 'dot_product', 'dot_self', 'eigenvalues_sym', 'eigenvectors_sym', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'falling_factorial', 'fdim', 'floor', 'fma', 'fmax', 'fmin', 'fmod', 'gamma_p', 'gamma_q', 'generalized_inverse', 'get_imag', 'get_lp', 'get_real', 'head', 'hmm_hidden_state_prob', 'hmm_marginal', 'hypot', 'identity_matrix', 'inc_beta', 'int_step', 'integrate_1d', 'integrate_ode', 'integrate_ode_adams', 'integrate_ode_bdf', 'integrate_ode_rk45', 'inv', 'inv_Phi', 'inv_cloglog', 'inv_logit', 'inv_sqrt', 'inv_square', 'inverse', 'inverse_spd', 'is_inf', 'is_nan', 'lambert_w0', 'lambert_wm1', 'lbeta', 'lchoose', 'ldexp', 'lgamma', 'linspaced_array', 'linspaced_int_array', 'linspaced_row_vector', 'linspaced_vector', 'lmgamma', 'lmultiply', 'log', 'log1m', 'log1m_exp', 'log1m_inv_logit', 'log1p', 'log1p_exp', 'log_determinant', 'log_diff_exp', 'log_falling_factorial', 'log_inv_logit', 'log_inv_logit_diff', 'log_mix', 'log_modified_bessel_first_kind', 'log_rising_factorial', 'log_softmax', 'log_sum_exp', 'logit', 'machine_precision', 'map_rect', 'matrix_exp', 'matrix_exp_multiply', 'matrix_power', 'max', 'mdivide_left_spd', 'mdivide_left_tri_low', 'mdivide_right_spd', 'mdivide_right_tri_low', 'mean', 'min', 'modified_bessel_first_kind', 'modified_bessel_second_kind', 'multiply_log', 'multiply_lower_tri_self_transpose', 'negative_infinity', 'norm', 'not_a_number', 'num_elements', 'ode_adams', 'ode_adams_tol', 'ode_adjoint_tol_ctl', 'ode_bdf', 'ode_bdf_tol', 'ode_ckrk', 'ode_ckrk_tol', 'ode_rk45', 'ode_rk45_tol', 'one_hot_array', 'one_hot_int_array', 'one_hot_row_vector', 'one_hot_vector', 'ones_array', 'ones_int_array', 'ones_row_vector', 'ones_vector', 'owens_t', 'polar', 'positive_infinity', 'pow', 'print', 'prod', 'proj', 'qr_Q', 'qr_R', 'qr_thin_Q', 'qr_thin_R', 'quad_form', 'quad_form_diag', 'quad_form_sym', 'quantile', 'rank', 'reduce_sum', 'reject', 'rep_array', 'rep_matrix', 'rep_row_vector', 'rep_vector', 'reverse', 'rising_factorial', 'round', 'row', 'rows', 'rows_dot_product', 'rows_dot_self', 'scale_matrix_exp_multiply', 'sd', 'segment', 'sin', 'singular_values', 'sinh', 'size', 'softmax', 'sort_asc', 'sort_desc', 'sort_indices_asc', 'sort_indices_desc', 'sqrt', 'square', 'squared_distance', 'step', 'sub_col', 'sub_row', 'sum', 'svd_U', 'svd_V', 'symmetrize_from_lower_tri', 'tail', 'tan', 'tanh', 'target', 'tcrossprod', 'tgamma', 'to_array_1d', 'to_array_2d', 'to_complex', 'to_matrix', 'to_row_vector', 'to_vector', 'trace', 'trace_gen_quad_form', 'trace_quad_form', 'trigamma', 'trunc', 'uniform_simplex', 'variance', 'zeros_array', 'zeros_int_array', 'zeros_row_vector'];\n  const DISTRIBUTIONS = ['bernoulli', 'bernoulli_logit', 'bernoulli_logit_glm', 'beta', 'beta_binomial', 'beta_proportion', 'binomial', 'binomial_logit', 'categorical', 'categorical_logit', 'categorical_logit_glm', 'cauchy', 'chi_square', 'dirichlet', 'discrete_range', 'double_exponential', 'exp_mod_normal', 'exponential', 'frechet', 'gamma', 'gaussian_dlm_obs', 'gumbel', 'hmm_latent', 'hypergeometric', 'inv_chi_square', 'inv_gamma', 'inv_wishart', 'lkj_corr', 'lkj_corr_cholesky', 'logistic', 'lognormal', 'multi_gp', 'multi_gp_cholesky', 'multi_normal', 'multi_normal_cholesky', 'multi_normal_prec', 'multi_student_t', 'multinomial', 'multinomial_logit', 'neg_binomial', 'neg_binomial_2', 'neg_binomial_2_log', 'neg_binomial_2_log_glm', 'normal', 'normal_id_glm', 'ordered_logistic', 'ordered_logistic_glm', 'ordered_probit', 'pareto', 'pareto_type_2', 'poisson', 'poisson_log', 'poisson_log_glm', 'rayleigh', 'scaled_inv_chi_square', 'skew_double_exponential', 'skew_normal', 'std_normal', 'student_t', 'uniform', 'von_mises', 'weibull', 'wiener', 'wishart'];\n  const BLOCK_COMMENT = hljs.COMMENT(/\\/\\*/, /\\*\\//, {\n    relevance: 0,\n    contains: [{\n      scope: 'doctag',\n      match: /@(return|param)/\n    }]\n  });\n  const INCLUDE = {\n    scope: 'meta',\n    begin: /#include\\b/,\n    end: /$/,\n    contains: [{\n      match: /[a-z][a-z-._]+/,\n      scope: 'string'\n    }, hljs.C_LINE_COMMENT_MODE]\n  };\n  const RANGE_CONSTRAINTS = [\"lower\", \"upper\", \"offset\", \"multiplier\"];\n  return {\n    name: 'Stan',\n    aliases: ['stanfuncs'],\n    keywords: {\n      $pattern: hljs.IDENT_RE,\n      title: BLOCKS,\n      type: TYPES,\n      keyword: STATEMENTS,\n      built_in: FUNCTIONS\n    },\n    contains: [hljs.C_LINE_COMMENT_MODE, INCLUDE, hljs.HASH_COMMENT_MODE, BLOCK_COMMENT, {\n      scope: 'built_in',\n      match: /\\s(pi|e|sqrt2|log2|log10)(?=\\()/,\n      relevance: 0\n    }, {\n      match: regex.concat(/[<,]\\s*/, regex.either(...RANGE_CONSTRAINTS), /\\s*=/),\n      keywords: RANGE_CONSTRAINTS\n    }, {\n      scope: 'keyword',\n      match: /\\btarget(?=\\s*\\+=)/\n    }, {\n      // highlights the 'T' in T[,] for only Stan language distributrions\n      match: [/~\\s*/, regex.either(...DISTRIBUTIONS), /(?:\\(\\))/, /\\s*T(?=\\s*\\[)/],\n      scope: {\n        2: \"built_in\",\n        4: \"keyword\"\n      }\n    }, {\n      // highlights distributions that end with special endings\n      scope: 'built_in',\n      keywords: DISTRIBUTIONS,\n      begin: regex.concat(/\\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/)\n    }, {\n      // highlights distributions after ~\n      begin: [/~/, /\\s*/, regex.concat(regex.either(...DISTRIBUTIONS), /(?=\\s*[\\(.*\\)])/)],\n      scope: {\n        3: \"built_in\"\n      }\n    }, {\n      // highlights user defined distributions after ~\n      begin: [/~/, /\\s*\\w+(?=\\s*[\\(.*\\)])/, '(?!.*/\\b(' + regex.either(...DISTRIBUTIONS) + ')\\b)'],\n      scope: {\n        2: \"title.function\"\n      }\n    }, {\n      // highlights user defined distributions with special endings\n      scope: 'title.function',\n      begin: /\\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/\n    }, {\n      scope: 'number',\n      match: regex.concat( // Comes from @RunDevelopment accessed 11/29/2021 at\n      // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56\n      // start of big noncapture group which\n      // 1. gets numbers that are by themselves\n      // 2. numbers that are separated by _\n      // 3. numbers that are separted by .\n      /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)/, // grabs scientific notation\n      // grabs complex numbers with i\n      /(?:[eE][+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/),\n      relevance: 0\n    }, {\n      scope: 'string',\n      begin: /\"/,\n      end: /\"/\n    }]\n  };\n}\n\nmodule.exports = stan;","map":{"version":3,"names":["stan","hljs","regex","BLOCKS","STATEMENTS","TYPES","FUNCTIONS","DISTRIBUTIONS","BLOCK_COMMENT","COMMENT","relevance","contains","scope","match","INCLUDE","begin","end","C_LINE_COMMENT_MODE","RANGE_CONSTRAINTS","name","aliases","keywords","$pattern","IDENT_RE","title","type","keyword","built_in","HASH_COMMENT_MODE","concat","either","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/stan.js"],"sourcesContent":["/*\nLanguage: Stan\nDescription: The Stan probabilistic programming language\nAuthor: Sean Pinkney <sean.pinkney@gmail.com>\nWebsite: http://mc-stan.org/\nCategory: scientific\n*/\n\nfunction stan(hljs) {\n  const regex = hljs.regex;\n  // variable names cannot conflict with block identifiers\n  const BLOCKS = [\n    'functions',\n    'model',\n    'data',\n    'parameters',\n    'quantities',\n    'transformed',\n    'generated'\n  ];\n\n  const STATEMENTS = [\n    'for',\n    'in',\n    'if',\n    'else',\n    'while',\n    'break',\n    'continue',\n    'return'\n  ];\n\n  const TYPES = [\n    'array',\n    'complex',\n    'int',\n    'real',\n    'vector',\n    'ordered',\n    'positive_ordered',\n    'simplex',\n    'unit_vector',\n    'row_vector',\n    'matrix',\n    'cholesky_factor_corr|10',\n    'cholesky_factor_cov|10',\n    'corr_matrix|10',\n    'cov_matrix|10',\n    'void'\n  ];\n\n  // to get the functions list\n  // clone the [stan-docs repo](https://github.com/stan-dev/docs)\n  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf\n  //\n  // the output files are\n  // distributions_quoted.txt\n  // functions_quoted.txt\n\n  const FUNCTIONS = [\n    'Phi',\n    'Phi_approx',\n    'abs',\n    'acos',\n    'acosh',\n    'add_diag',\n    'algebra_solver',\n    'algebra_solver_newton',\n    'append_array',\n    'append_col',\n    'append_row',\n    'asin',\n    'asinh',\n    'atan',\n    'atan2',\n    'atanh',\n    'bessel_first_kind',\n    'bessel_second_kind',\n    'binary_log_loss',\n    'binomial_coefficient_log',\n    'block',\n    'cbrt',\n    'ceil',\n    'chol2inv',\n    'cholesky_decompose',\n    'choose',\n    'col',\n    'cols',\n    'columns_dot_product',\n    'columns_dot_self',\n    'conj',\n    'cos',\n    'cosh',\n    'cov_exp_quad',\n    'crossprod',\n    'csr_extract_u',\n    'csr_extract_v',\n    'csr_extract_w',\n    'csr_matrix_times_vector',\n    'csr_to_dense_matrix',\n    'cumulative_sum',\n    'determinant',\n    'diag_matrix',\n    'diag_post_multiply',\n    'diag_pre_multiply',\n    'diagonal',\n    'digamma',\n    'dims',\n    'distance',\n    'dot_product',\n    'dot_self',\n    'eigenvalues_sym',\n    'eigenvectors_sym',\n    'erf',\n    'erfc',\n    'exp',\n    'exp2',\n    'expm1',\n    'fabs',\n    'falling_factorial',\n    'fdim',\n    'floor',\n    'fma',\n    'fmax',\n    'fmin',\n    'fmod',\n    'gamma_p',\n    'gamma_q',\n    'generalized_inverse',\n    'get_imag',\n    'get_lp',\n    'get_real',\n    'head',\n    'hmm_hidden_state_prob',\n    'hmm_marginal',\n    'hypot',\n    'identity_matrix',\n    'inc_beta',\n    'int_step',\n    'integrate_1d',\n    'integrate_ode',\n    'integrate_ode_adams',\n    'integrate_ode_bdf',\n    'integrate_ode_rk45',\n    'inv',\n    'inv_Phi',\n    'inv_cloglog',\n    'inv_logit',\n    'inv_sqrt',\n    'inv_square',\n    'inverse',\n    'inverse_spd',\n    'is_inf',\n    'is_nan',\n    'lambert_w0',\n    'lambert_wm1',\n    'lbeta',\n    'lchoose',\n    'ldexp',\n    'lgamma',\n    'linspaced_array',\n    'linspaced_int_array',\n    'linspaced_row_vector',\n    'linspaced_vector',\n    'lmgamma',\n    'lmultiply',\n    'log',\n    'log1m',\n    'log1m_exp',\n    'log1m_inv_logit',\n    'log1p',\n    'log1p_exp',\n    'log_determinant',\n    'log_diff_exp',\n    'log_falling_factorial',\n    'log_inv_logit',\n    'log_inv_logit_diff',\n    'log_mix',\n    'log_modified_bessel_first_kind',\n    'log_rising_factorial',\n    'log_softmax',\n    'log_sum_exp',\n    'logit',\n    'machine_precision',\n    'map_rect',\n    'matrix_exp',\n    'matrix_exp_multiply',\n    'matrix_power',\n    'max',\n    'mdivide_left_spd',\n    'mdivide_left_tri_low',\n    'mdivide_right_spd',\n    'mdivide_right_tri_low',\n    'mean',\n    'min',\n    'modified_bessel_first_kind',\n    'modified_bessel_second_kind',\n    'multiply_log',\n    'multiply_lower_tri_self_transpose',\n    'negative_infinity',\n    'norm',\n    'not_a_number',\n    'num_elements',\n    'ode_adams',\n    'ode_adams_tol',\n    'ode_adjoint_tol_ctl',\n    'ode_bdf',\n    'ode_bdf_tol',\n    'ode_ckrk',\n    'ode_ckrk_tol',\n    'ode_rk45',\n    'ode_rk45_tol',\n    'one_hot_array',\n    'one_hot_int_array',\n    'one_hot_row_vector',\n    'one_hot_vector',\n    'ones_array',\n    'ones_int_array',\n    'ones_row_vector',\n    'ones_vector',\n    'owens_t',\n    'polar',\n    'positive_infinity',\n    'pow',\n    'print',\n    'prod',\n    'proj',\n    'qr_Q',\n    'qr_R',\n    'qr_thin_Q',\n    'qr_thin_R',\n    'quad_form',\n    'quad_form_diag',\n    'quad_form_sym',\n    'quantile',\n    'rank',\n    'reduce_sum',\n    'reject',\n    'rep_array',\n    'rep_matrix',\n    'rep_row_vector',\n    'rep_vector',\n    'reverse',\n    'rising_factorial',\n    'round',\n    'row',\n    'rows',\n    'rows_dot_product',\n    'rows_dot_self',\n    'scale_matrix_exp_multiply',\n    'sd',\n    'segment',\n    'sin',\n    'singular_values',\n    'sinh',\n    'size',\n    'softmax',\n    'sort_asc',\n    'sort_desc',\n    'sort_indices_asc',\n    'sort_indices_desc',\n    'sqrt',\n    'square',\n    'squared_distance',\n    'step',\n    'sub_col',\n    'sub_row',\n    'sum',\n    'svd_U',\n    'svd_V',\n    'symmetrize_from_lower_tri',\n    'tail',\n    'tan',\n    'tanh',\n    'target',\n    'tcrossprod',\n    'tgamma',\n    'to_array_1d',\n    'to_array_2d',\n    'to_complex',\n    'to_matrix',\n    'to_row_vector',\n    'to_vector',\n    'trace',\n    'trace_gen_quad_form',\n    'trace_quad_form',\n    'trigamma',\n    'trunc',\n    'uniform_simplex',\n    'variance',\n    'zeros_array',\n    'zeros_int_array',\n    'zeros_row_vector'\n  ];\n\n  const DISTRIBUTIONS = [\n    'bernoulli',\n    'bernoulli_logit',\n    'bernoulli_logit_glm',\n    'beta',\n    'beta_binomial',\n    'beta_proportion',\n    'binomial',\n    'binomial_logit',\n    'categorical',\n    'categorical_logit',\n    'categorical_logit_glm',\n    'cauchy',\n    'chi_square',\n    'dirichlet',\n    'discrete_range',\n    'double_exponential',\n    'exp_mod_normal',\n    'exponential',\n    'frechet',\n    'gamma',\n    'gaussian_dlm_obs',\n    'gumbel',\n    'hmm_latent',\n    'hypergeometric',\n    'inv_chi_square',\n    'inv_gamma',\n    'inv_wishart',\n    'lkj_corr',\n    'lkj_corr_cholesky',\n    'logistic',\n    'lognormal',\n    'multi_gp',\n    'multi_gp_cholesky',\n    'multi_normal',\n    'multi_normal_cholesky',\n    'multi_normal_prec',\n    'multi_student_t',\n    'multinomial',\n    'multinomial_logit',\n    'neg_binomial',\n    'neg_binomial_2',\n    'neg_binomial_2_log',\n    'neg_binomial_2_log_glm',\n    'normal',\n    'normal_id_glm',\n    'ordered_logistic',\n    'ordered_logistic_glm',\n    'ordered_probit',\n    'pareto',\n    'pareto_type_2',\n    'poisson',\n    'poisson_log',\n    'poisson_log_glm',\n    'rayleigh',\n    'scaled_inv_chi_square',\n    'skew_double_exponential',\n    'skew_normal',\n    'std_normal',\n    'student_t',\n    'uniform',\n    'von_mises',\n    'weibull',\n    'wiener',\n    'wishart'\n  ];\n\n  const BLOCK_COMMENT = hljs.COMMENT(\n    /\\/\\*/,\n    /\\*\\//,\n    {\n      relevance: 0,\n      contains: [\n        {\n          scope: 'doctag',\n          match: /@(return|param)/\n        }\n      ]\n    }\n  );\n\n  const INCLUDE = {\n    scope: 'meta',\n    begin: /#include\\b/,\n    end: /$/,\n    contains: [\n      {\n        match: /[a-z][a-z-._]+/,\n        scope: 'string'\n      },\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n\n  const RANGE_CONSTRAINTS = [\n    \"lower\",\n    \"upper\",\n    \"offset\",\n    \"multiplier\"\n  ];\n\n  return {\n    name: 'Stan',\n    aliases: [ 'stanfuncs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE,\n      title: BLOCKS,\n      type: TYPES,\n      keyword: STATEMENTS,\n      built_in: FUNCTIONS\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      INCLUDE,\n      hljs.HASH_COMMENT_MODE,\n      BLOCK_COMMENT,\n      {\n        scope: 'built_in',\n        match: /\\s(pi|e|sqrt2|log2|log10)(?=\\()/,\n        relevance: 0\n      },\n      {\n        match: regex.concat(/[<,]\\s*/, regex.either(...RANGE_CONSTRAINTS), /\\s*=/),\n        keywords: RANGE_CONSTRAINTS\n      },\n      {\n        scope: 'keyword',\n        match: /\\btarget(?=\\s*\\+=)/,\n      },\n      {\n        // highlights the 'T' in T[,] for only Stan language distributrions\n        match: [\n          /~\\s*/,\n          regex.either(...DISTRIBUTIONS),\n          /(?:\\(\\))/,\n          /\\s*T(?=\\s*\\[)/\n        ],\n        scope: {\n          2: \"built_in\",\n          4: \"keyword\"\n        }\n      },\n      {\n        // highlights distributions that end with special endings\n        scope: 'built_in',\n        keywords: DISTRIBUTIONS,\n        begin: regex.concat(/\\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/)\n      },\n      {\n        // highlights distributions after ~\n        begin: [\n          /~/,\n          /\\s*/,\n          regex.concat(regex.either(...DISTRIBUTIONS), /(?=\\s*[\\(.*\\)])/)\n        ],\n        scope: { 3: \"built_in\" }\n      },\n      {\n        // highlights user defined distributions after ~\n        begin: [\n          /~/,\n          /\\s*\\w+(?=\\s*[\\(.*\\)])/,\n          '(?!.*/\\b(' + regex.either(...DISTRIBUTIONS) + ')\\b)'\n        ],\n        scope: { 2: \"title.function\" }\n      },\n      {\n        // highlights user defined distributions with special endings\n        scope: 'title.function',\n        begin: /\\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/\n      },\n      {\n        scope: 'number',\n        match: regex.concat(\n          // Comes from @RunDevelopment accessed 11/29/2021 at\n          // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56\n\n          // start of big noncapture group which\n          // 1. gets numbers that are by themselves\n          // 2. numbers that are separated by _\n          // 3. numbers that are separted by .\n          /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)/,\n          // grabs scientific notation\n          // grabs complex numbers with i\n          /(?:[eE][+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/\n        ),\n        relevance: 0\n      },\n      {\n        scope: 'string',\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n}\n\nmodule.exports = stan;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}