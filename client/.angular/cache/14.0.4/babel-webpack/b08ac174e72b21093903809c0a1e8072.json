{"ast":null,"code":"/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp that’s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\nfunction hy(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in: // keywords\n    '!= % %= & &= * ** **= *= *map ' + '+ += , --build-class-- --import-- -= . / // //= ' + '/= < << <<= <= = > >= >> >>= ' + '@ @= ^ ^= abs accumulate all and any ap-compose ' + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' + 'callable calling-module-name car case cdr chain chr coll? combinations compile ' + 'compress cond cons cons? continue count curry cut cycle dec ' + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' + 'flatten float? fn fnc fnr for for* format fraction genexpr ' + 'gensym get getattr global globals group-by hasattr hash hex id ' + 'identity if if* if-not if-python2 import in inc input instance? ' + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' + 'iter iterable? iterate iterator? keyword keyword? lambda last len let ' + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' + 'none? nonlocal not not-in not? nth numeric? oct odd? open ' + 'or ord partition permutations pos? post-route postwalk pow prewalk print ' + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' + 'recursive-replace reduce remove repeat repeatedly repr require rest round route ' + 'route-with-methods rwm second seq set-comp setattr setv some sorted string ' + 'string? sum switch symbol? take take-nth take-while tee try unless ' + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' + 'xi xor yield yield-from zero? zip zip-longest | |= ~'\n  };\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    keywords: keywords,\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  return {\n    name: 'Hy',\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [hljs.SHEBANG(), LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = hy;","map":{"version":3,"names":["hy","hljs","SYMBOLSTART","SYMBOL_RE","keywords","$pattern","built_in","SIMPLE_NUMBER_RE","SYMBOL","begin","relevance","NUMBER","className","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","starts","DEFAULT_CONTAINS","contains","name","aliases","SHEBANG","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/hy.js"],"sourcesContent":["/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp that’s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\n\nfunction hy(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in:\n      // keywords\n      '!= % %= & &= * ** **= *= *map '\n      + '+ += , --build-class-- --import-- -= . / // //= '\n      + '/= < << <<= <= = > >= >> >>= '\n      + '@ @= ^ ^= abs accumulate all and any ap-compose '\n      + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe '\n      + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast '\n      + 'callable calling-module-name car case cdr chain chr coll? combinations compile '\n      + 'compress cond cons cons? continue count curry cut cycle dec '\n      + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn '\n      + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir '\n      + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? '\n      + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first '\n      + 'flatten float? fn fnc fnr for for* format fraction genexpr '\n      + 'gensym get getattr global globals group-by hasattr hash hex id '\n      + 'identity if if* if-not if-python2 import in inc input instance? '\n      + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even '\n      + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none '\n      + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass '\n      + 'iter iterable? iterate iterator? keyword keyword? lambda last len let '\n      + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all '\n      + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next '\n      + 'none? nonlocal not not-in not? nth numeric? oct odd? open '\n      + 'or ord partition permutations pos? post-route postwalk pow prewalk print '\n      + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str '\n      + 'recursive-replace reduce remove repeat repeatedly repr require rest round route '\n      + 'route-with-methods rwm second seq set-comp setattr setv some sorted string '\n      + 'string? sum switch symbol? take take-nth take-while tee try unless '\n      + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms '\n      + 'xi xor yield yield-from zero? zip zip-longest | |= ~'\n  };\n\n  const SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    { relevance: 0 }\n  );\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  const COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  const HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    keywords: keywords,\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [\n    LIST,\n    STRING,\n    HINT,\n    HINT_COL,\n    COMMENT,\n    KEY,\n    COLLECTION,\n    NUMBER,\n    LITERAL,\n    SYMBOL\n  ];\n\n  LIST.contains = [\n    hljs.COMMENT('comment', ''),\n    NAME,\n    BODY\n  ];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Hy',\n    aliases: [ 'hylang' ],\n    illegal: /\\S/,\n    contains: [\n      hljs.SHEBANG(),\n      LIST,\n      STRING,\n      HINT,\n      HINT_COL,\n      COMMENT,\n      KEY,\n      COLLECTION,\n      NUMBER,\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = hy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}