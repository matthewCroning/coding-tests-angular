{"ast":null,"code":"/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: LISP_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#(b|B)[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#(o|O)[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'\n    }, {\n      begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n      end: '\\\\)'\n    }]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = {\n    begin: MEC_RE\n  };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: ['self', LITERAL, STRING, NUMBER, IDENT]\n  };\n  const QUOTED = {\n    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],\n    variants: [{\n      begin: '[\\'`]\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\(quote ',\n      end: '\\\\)',\n      keywords: {\n        name: 'quote'\n      }\n    }, {\n      begin: '\\'' + MEC_RE\n    }]\n  };\n  const QUOTED_ATOM = {\n    variants: [{\n      begin: '\\'' + LISP_IDENT_RE\n    }, {\n      begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'\n    }]\n  };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [{\n    className: 'name',\n    variants: [{\n      begin: LISP_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: MEC_RE\n    }]\n  }, BODY];\n  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [NUMBER, hljs.SHEBANG(), LITERAL, STRING, COMMENT, QUOTED, QUOTED_ATOM, LIST, IDENT]\n  };\n}\n\nmodule.exports = lisp;","map":{"version":3,"names":["lisp","hljs","LISP_IDENT_RE","MEC_RE","LISP_SIMPLE_NUMBER_RE","LITERAL","className","begin","NUMBER","variants","relevance","end","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","VARIABLE","KEYWORD","IDENT","MEC","QUOTED_LIST","contains","QUOTED","keywords","name","QUOTED_ATOM","LIST","BODY","endsWithParent","SHEBANG","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/lisp.js"],"sourcesContent":["/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\n\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: LISP_SIMPLE_NUMBER_RE,\n        relevance: 0\n      },\n      { begin: '#(b|B)[0-1]+(/[0-1]+)?' },\n      { begin: '#(o|O)[0-7]+(/[0-7]+)?' },\n      { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },\n      {\n        begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n        end: '\\\\)'\n      }\n    ]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMENT = hljs.COMMENT(\n    ';', '$',\n    { relevance: 0 }\n  );\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = { begin: MEC_RE };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: [\n      'self',\n      LITERAL,\n      STRING,\n      NUMBER,\n      IDENT\n    ]\n  };\n  const QUOTED = {\n    contains: [\n      NUMBER,\n      STRING,\n      VARIABLE,\n      KEYWORD,\n      QUOTED_LIST,\n      IDENT\n    ],\n    variants: [\n      {\n        begin: '[\\'`]\\\\(',\n        end: '\\\\)'\n      },\n      {\n        begin: '\\\\(quote ',\n        end: '\\\\)',\n        keywords: { name: 'quote' }\n      },\n      { begin: '\\'' + MEC_RE }\n    ]\n  };\n  const QUOTED_ATOM = { variants: [\n    { begin: '\\'' + LISP_IDENT_RE },\n    { begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }\n  ] };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [\n    {\n      className: 'name',\n      variants: [\n        {\n          begin: LISP_IDENT_RE,\n          relevance: 0,\n        },\n        { begin: MEC_RE }\n      ]\n    },\n    BODY\n  ];\n  BODY.contains = [\n    QUOTED,\n    QUOTED_ATOM,\n    LIST,\n    LITERAL,\n    NUMBER,\n    STRING,\n    COMMENT,\n    VARIABLE,\n    KEYWORD,\n    MEC,\n    IDENT\n  ];\n\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [\n      NUMBER,\n      hljs.SHEBANG(),\n      LITERAL,\n      STRING,\n      COMMENT,\n      QUOTED,\n      QUOTED_ATOM,\n      LIST,\n      IDENT\n    ]\n  };\n}\n\nmodule.exports = lisp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}