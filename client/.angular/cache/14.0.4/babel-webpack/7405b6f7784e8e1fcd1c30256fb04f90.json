{"ast":null,"code":"/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [// TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    }, // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [// too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    }, // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    }, // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    }, // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.*?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      // empty strings for alt or link text\n      match: /\\[(?=\\])/\n    }, {\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  }; // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, {\n    contains: []\n  });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, {\n    contains: []\n  });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  [BOLD, ITALIC, BOLD_WITHOUT_ITALIC, ITALIC_WITHOUT_BOLD].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\n\nmodule.exports = markdown;","map":{"version":3,"names":["markdown","hljs","regex","INLINE_HTML","begin","end","subLanguage","relevance","HORIZONTAL_RULE","CODE","className","variants","contains","LIST","excludeEnd","LINK_REFERENCE","returnBegin","excludeBegin","URL_SCHEME","LINK","concat","match","returnEnd","BOLD","ITALIC","BOLD_WITHOUT_ITALIC","inherit","ITALIC_WITHOUT_BOLD","push","CONTAINABLE","forEach","m","HEADER","BLOCKQUOTE","name","aliases","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/markdown.js"],"sourcesContent":["/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      { begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*' },\n      { begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*' },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      { begin: '`.+?`' },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/ },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n\n  // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  [\n    BOLD,\n    ITALIC,\n    BOLD_WITHOUT_ITALIC,\n    ITALIC_WITHOUT_BOLD\n  ].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          { begin: '^[=-]*$' },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}