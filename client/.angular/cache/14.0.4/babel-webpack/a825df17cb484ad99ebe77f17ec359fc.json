{"ast":null,"code":"/*\nLanguage: PHP\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://www.php.net\nCategory: common\n*/\n\n/**\n * @param {HLJSApi} hljs\n * @returns {LanguageDetail}\n * */\nfunction php(hljs) {\n  const regex = hljs.regex; // negative look-ahead tries to avoid matching patterns that are not\n  // Perl at all like $ident$, @ident@, etc.\n\n  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\n  const IDENT_RE = regex.concat(/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/, NOT_PERL_ETC); // Will not detect camelCase classes\n\n  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(/(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/, NOT_PERL_ETC);\n  const VARIABLE = {\n    scope: 'variable',\n    match: '\\\\$+' + IDENT_RE\n  };\n  const PREPROCESSOR = {\n    scope: 'meta',\n    variants: [{\n      begin: /<\\?php/,\n      relevance: 10\n    }, // boost for obvious PHP\n    {\n      begin: /<\\?=/\n    }, // less relevant per PSR-1 which says not to use short-tags\n    {\n      begin: /<\\?/,\n      relevance: 0.1\n    }, {\n      begin: /\\?>/\n    } // end php tag\n    ]\n  };\n  const SUBST = {\n    scope: 'subst',\n    variants: [{\n      begin: /\\$\\w+/\n    }, {\n      begin: /\\{\\$/,\n      end: /\\}/\n    }]\n  };\n  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, {\n    illegal: null\n  });\n  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)\n  });\n  const HEREDOC = hljs.END_SAME_AS_BEGIN({\n    begin: /<<<[ \\t]*(\\w+)\\n/,\n    end: /[ \\t]*(\\w+)\\b/,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST)\n  }); // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\n\n  const WHITESPACE = '[ \\t\\n]';\n  const STRING = {\n    scope: 'string',\n    variants: [DOUBLE_QUOTED, SINGLE_QUOTED, HEREDOC]\n  };\n  const NUMBER = {\n    scope: 'number',\n    variants: [{\n      begin: `\\\\b0[bB][01]+(?:_[01]+)*\\\\b`\n    }, // Binary w/ underscore support\n    {\n      begin: `\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b`\n    }, // Octals w/ underscore support\n    {\n      begin: `\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b`\n    }, // Hex w/ underscore support\n    // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\n    {\n      begin: `(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?`\n    }],\n    relevance: 0\n  };\n  const LITERALS = [\"false\", \"null\", \"true\"];\n  const KWS = [// Magic constants:\n  // <https://www.php.net/manual/en/language.constants.predefined.php>\n  \"__CLASS__\", \"__DIR__\", \"__FILE__\", \"__FUNCTION__\", \"__COMPILER_HALT_OFFSET__\", \"__LINE__\", \"__METHOD__\", \"__NAMESPACE__\", \"__TRAIT__\", // Function that look like language construct or language construct that look like function:\n  // List of keywords that may not require parenthesis\n  \"die\", \"echo\", \"exit\", \"include\", \"include_once\", \"print\", \"require\", \"require_once\", // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\n  // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\n  // Other keywords:\n  // <https://www.php.net/manual/en/reserved.php>\n  // <https://www.php.net/manual/en/language.types.type-juggling.php>\n  \"array\", \"abstract\", \"and\", \"as\", \"binary\", \"bool\", \"boolean\", \"break\", \"callable\", \"case\", \"catch\", \"class\", \"clone\", \"const\", \"continue\", \"declare\", \"default\", \"do\", \"double\", \"else\", \"elseif\", \"empty\", \"enddeclare\", \"endfor\", \"endforeach\", \"endif\", \"endswitch\", \"endwhile\", \"enum\", \"eval\", \"extends\", \"final\", \"finally\", \"float\", \"for\", \"foreach\", \"from\", \"global\", \"goto\", \"if\", \"implements\", \"instanceof\", \"insteadof\", \"int\", \"integer\", \"interface\", \"isset\", \"iterable\", \"list\", \"match|0\", \"mixed\", \"new\", \"never\", \"object\", \"or\", \"private\", \"protected\", \"public\", \"readonly\", \"real\", \"return\", \"string\", \"switch\", \"throw\", \"trait\", \"try\", \"unset\", \"use\", \"var\", \"void\", \"while\", \"xor\", \"yield\"];\n  const BUILT_INS = [// Standard PHP library:\n  // <https://www.php.net/manual/en/book.spl.php>\n  \"Error|0\", \"AppendIterator\", \"ArgumentCountError\", \"ArithmeticError\", \"ArrayIterator\", \"ArrayObject\", \"AssertionError\", \"BadFunctionCallException\", \"BadMethodCallException\", \"CachingIterator\", \"CallbackFilterIterator\", \"CompileError\", \"Countable\", \"DirectoryIterator\", \"DivisionByZeroError\", \"DomainException\", \"EmptyIterator\", \"ErrorException\", \"Exception\", \"FilesystemIterator\", \"FilterIterator\", \"GlobIterator\", \"InfiniteIterator\", \"InvalidArgumentException\", \"IteratorIterator\", \"LengthException\", \"LimitIterator\", \"LogicException\", \"MultipleIterator\", \"NoRewindIterator\", \"OutOfBoundsException\", \"OutOfRangeException\", \"OuterIterator\", \"OverflowException\", \"ParentIterator\", \"ParseError\", \"RangeException\", \"RecursiveArrayIterator\", \"RecursiveCachingIterator\", \"RecursiveCallbackFilterIterator\", \"RecursiveDirectoryIterator\", \"RecursiveFilterIterator\", \"RecursiveIterator\", \"RecursiveIteratorIterator\", \"RecursiveRegexIterator\", \"RecursiveTreeIterator\", \"RegexIterator\", \"RuntimeException\", \"SeekableIterator\", \"SplDoublyLinkedList\", \"SplFileInfo\", \"SplFileObject\", \"SplFixedArray\", \"SplHeap\", \"SplMaxHeap\", \"SplMinHeap\", \"SplObjectStorage\", \"SplObserver\", \"SplPriorityQueue\", \"SplQueue\", \"SplStack\", \"SplSubject\", \"SplTempFileObject\", \"TypeError\", \"UnderflowException\", \"UnexpectedValueException\", \"UnhandledMatchError\", // Reserved interfaces:\n  // <https://www.php.net/manual/en/reserved.interfaces.php>\n  \"ArrayAccess\", \"BackedEnum\", \"Closure\", \"Fiber\", \"Generator\", \"Iterator\", \"IteratorAggregate\", \"Serializable\", \"Stringable\", \"Throwable\", \"Traversable\", \"UnitEnum\", \"WeakReference\", \"WeakMap\", // Reserved classes:\n  // <https://www.php.net/manual/en/reserved.classes.php>\n  \"Directory\", \"__PHP_Incomplete_Class\", \"parent\", \"php_user_filter\", \"self\", \"static\", \"stdClass\"];\n  /** Dual-case keywords\n   *\n   * [\"then\",\"FILE\"] =>\n   *     [\"then\", \"THEN\", \"FILE\", \"file\"]\n   *\n   * @param {string[]} items */\n\n  const dualCase = items => {\n    /** @type string[] */\n    const result = [];\n    items.forEach(item => {\n      result.push(item);\n\n      if (item.toLowerCase() === item) {\n        result.push(item.toUpperCase());\n      } else {\n        result.push(item.toLowerCase());\n      }\n    });\n    return result;\n  };\n\n  const KEYWORDS = {\n    keyword: KWS,\n    literal: dualCase(LITERALS),\n    built_in: BUILT_INS\n  };\n  /**\n   * @param {string[]} items */\n\n  const normalizeKeywords = items => {\n    return items.map(item => {\n      return item.replace(/\\|\\d+$/, \"\");\n    });\n  };\n\n  const CONSTRUCTOR_CALL = {\n    variants: [{\n      match: [/new/, regex.concat(WHITESPACE, \"+\"), // to prevent built ins from being confused as the class constructor call\n      regex.concat(\"(?!\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"), PASCAL_CASE_CLASS_NAME_RE],\n      scope: {\n        1: \"keyword\",\n        4: \"title.class\"\n      }\n    }]\n  };\n  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \"\\\\b(?!\\\\()\");\n  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = {\n    variants: [{\n      match: [regex.concat(/::/, regex.lookahead(/(?!class\\b)/)), CONSTANT_REFERENCE],\n      scope: {\n        2: \"variable.constant\"\n      }\n    }, {\n      match: [/::/, /class/],\n      scope: {\n        2: \"variable.language\"\n      }\n    }, {\n      match: [PASCAL_CASE_CLASS_NAME_RE, regex.concat(/::/, regex.lookahead(/(?!class\\b)/)), CONSTANT_REFERENCE],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.constant\"\n      }\n    }, {\n      match: [PASCAL_CASE_CLASS_NAME_RE, regex.concat(\"::\", regex.lookahead(/(?!class\\b)/))],\n      scope: {\n        1: \"title.class\"\n      }\n    }, {\n      match: [PASCAL_CASE_CLASS_NAME_RE, /::/, /class/],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.language\"\n      }\n    }]\n  };\n  const NAMED_ARGUMENT = {\n    scope: 'attr',\n    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/))\n  };\n  const PARAMS_MODE = {\n    relevance: 0,\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [NAMED_ARGUMENT, VARIABLE, LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON, hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER, CONSTRUCTOR_CALL]\n  };\n  const FUNCTION_INVOKE = {\n    relevance: 0,\n    match: [/\\b/, // to prevent keywords from being confused as the function title\n    regex.concat(\"(?!fn\\\\b|function\\\\b|\", normalizeKeywords(KWS).join(\"\\\\b|\"), \"|\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"), IDENT_RE, regex.concat(WHITESPACE, \"*\"), regex.lookahead(/(?=\\()/)],\n    scope: {\n      3: \"title.function.invoke\"\n    },\n    contains: [PARAMS_MODE]\n  };\n  PARAMS_MODE.contains.push(FUNCTION_INVOKE);\n  const ATTRIBUTE_CONTAINS = [NAMED_ARGUMENT, LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON, hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER, CONSTRUCTOR_CALL];\n  const ATTRIBUTES = {\n    begin: regex.concat(/#\\[\\s*/, PASCAL_CASE_CLASS_NAME_RE),\n    beginScope: \"meta\",\n    end: /]/,\n    endScope: \"meta\",\n    keywords: {\n      literal: LITERALS,\n      keyword: ['new', 'array']\n    },\n    contains: [{\n      begin: /\\[/,\n      end: /]/,\n      keywords: {\n        literal: LITERALS,\n        keyword: ['new', 'array']\n      },\n      contains: ['self', ...ATTRIBUTE_CONTAINS]\n    }, ...ATTRIBUTE_CONTAINS, {\n      scope: 'meta',\n      match: PASCAL_CASE_CLASS_NAME_RE\n    }]\n  };\n  return {\n    case_insensitive: false,\n    keywords: KEYWORDS,\n    contains: [ATTRIBUTES, hljs.HASH_COMMENT_MODE, hljs.COMMENT('//', '$'), hljs.COMMENT('/\\\\*', '\\\\*/', {\n      contains: [{\n        scope: 'doctag',\n        match: '@[A-Za-z]+'\n      }]\n    }), {\n      match: /__halt_compiler\\(\\);/,\n      keywords: '__halt_compiler',\n      starts: {\n        scope: \"comment\",\n        end: hljs.MATCH_NOTHING_RE,\n        contains: [{\n          match: /\\?>/,\n          scope: \"meta\",\n          endsParent: true\n        }]\n      }\n    }, PREPROCESSOR, {\n      scope: 'variable.language',\n      match: /\\$this\\b/\n    }, VARIABLE, FUNCTION_INVOKE, LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON, {\n      match: [/const/, /\\s/, IDENT_RE],\n      scope: {\n        1: \"keyword\",\n        3: \"variable.constant\"\n      }\n    }, CONSTRUCTOR_CALL, {\n      scope: 'function',\n      relevance: 0,\n      beginKeywords: 'fn function',\n      end: /[;{]/,\n      excludeEnd: true,\n      illegal: '[$%\\\\[]',\n      contains: [{\n        beginKeywords: 'use'\n      }, hljs.UNDERSCORE_TITLE_MODE, {\n        begin: '=>',\n        // No markup, just a relevance booster\n        endsParent: true\n      }, {\n        scope: 'params',\n        begin: '\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: ['self', VARIABLE, LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON, hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER]\n      }]\n    }, {\n      scope: 'class',\n      variants: [{\n        beginKeywords: \"enum\",\n        illegal: /[($\"]/\n      }, {\n        beginKeywords: \"class interface trait\",\n        illegal: /[:($\"]/\n      }],\n      relevance: 0,\n      end: /\\{/,\n      excludeEnd: true,\n      contains: [{\n        beginKeywords: 'extends implements'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, // both use and namespace still use \"old style\" rules (vs multi-match)\n    // because the namespace name can include `\\` and we still want each\n    // element to be treated as its own *individual* title\n    {\n      beginKeywords: 'namespace',\n      relevance: 0,\n      end: ';',\n      illegal: /[.']/,\n      contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n        scope: \"title.class\"\n      })]\n    }, {\n      beginKeywords: 'use',\n      relevance: 0,\n      end: ';',\n      contains: [// TODO: title.function vs title.class\n      {\n        match: /\\b(as|const|function)\\b/,\n        scope: \"keyword\"\n      }, // TODO: could be title.class or title.function\n      hljs.UNDERSCORE_TITLE_MODE]\n    }, STRING, NUMBER]\n  };\n}\n\nmodule.exports = php;","map":{"version":3,"names":["php","hljs","regex","NOT_PERL_ETC","IDENT_RE","concat","PASCAL_CASE_CLASS_NAME_RE","VARIABLE","scope","match","PREPROCESSOR","variants","begin","relevance","SUBST","end","SINGLE_QUOTED","inherit","APOS_STRING_MODE","illegal","DOUBLE_QUOTED","QUOTE_STRING_MODE","contains","HEREDOC","END_SAME_AS_BEGIN","WHITESPACE","STRING","NUMBER","LITERALS","KWS","BUILT_INS","dualCase","items","result","forEach","item","push","toLowerCase","toUpperCase","KEYWORDS","keyword","literal","built_in","normalizeKeywords","map","replace","CONSTRUCTOR_CALL","join","CONSTANT_REFERENCE","LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON","lookahead","NAMED_ARGUMENT","PARAMS_MODE","keywords","C_BLOCK_COMMENT_MODE","FUNCTION_INVOKE","ATTRIBUTE_CONTAINS","ATTRIBUTES","beginScope","endScope","case_insensitive","HASH_COMMENT_MODE","COMMENT","starts","MATCH_NOTHING_RE","endsParent","beginKeywords","excludeEnd","UNDERSCORE_TITLE_MODE","excludeBegin","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/php.js"],"sourcesContent":["/*\nLanguage: PHP\nAuthor: Victor Karamzin <Victor.Karamzin@enterra-inc.com>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://www.php.net\nCategory: common\n*/\n\n/**\n * @param {HLJSApi} hljs\n * @returns {LanguageDetail}\n * */\nfunction php(hljs) {\n  const regex = hljs.regex;\n  // negative look-ahead tries to avoid matching patterns that are not\n  // Perl at all like $ident$, @ident@, etc.\n  const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;\n  const IDENT_RE = regex.concat(\n    /[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/,\n    NOT_PERL_ETC);\n  // Will not detect camelCase classes\n  const PASCAL_CASE_CLASS_NAME_RE = regex.concat(\n    /(\\\\?[A-Z][a-z0-9_\\x7f-\\xff]+|\\\\?[A-Z]+(?=[A-Z][a-z0-9_\\x7f-\\xff])){1,}/,\n    NOT_PERL_ETC);\n  const VARIABLE = {\n    scope: 'variable',\n    match: '\\\\$+' + IDENT_RE,\n  };\n  const PREPROCESSOR = {\n    scope: 'meta',\n    variants: [\n      { begin: /<\\?php/, relevance: 10 }, // boost for obvious PHP\n      { begin: /<\\?=/ },\n      // less relevant per PSR-1 which says not to use short-tags\n      { begin: /<\\?/, relevance: 0.1 },\n      { begin: /\\?>/ } // end php tag\n    ]\n  };\n  const SUBST = {\n    scope: 'subst',\n    variants: [\n      { begin: /\\$\\w+/ },\n      {\n        begin: /\\{\\$/,\n        end: /\\}/\n      }\n    ]\n  };\n  const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });\n  const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n  });\n  const HEREDOC = hljs.END_SAME_AS_BEGIN({\n    begin: /<<<[ \\t]*(\\w+)\\n/,\n    end: /[ \\t]*(\\w+)\\b/,\n    contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),\n  });\n  // list of valid whitespaces because non-breaking space might be part of a IDENT_RE\n  const WHITESPACE = '[ \\t\\n]';\n  const STRING = {\n    scope: 'string',\n    variants: [\n      DOUBLE_QUOTED,\n      SINGLE_QUOTED,\n      HEREDOC\n    ]\n  };\n  const NUMBER = {\n    scope: 'number',\n    variants: [\n      { begin: `\\\\b0[bB][01]+(?:_[01]+)*\\\\b` }, // Binary w/ underscore support\n      { begin: `\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\b` }, // Octals w/ underscore support\n      { begin: `\\\\b0[xX][\\\\da-fA-F]+(?:_[\\\\da-fA-F]+)*\\\\b` }, // Hex w/ underscore support\n      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.\n      { begin: `(?:\\\\b\\\\d+(?:_\\\\d+)*(\\\\.(?:\\\\d+(?:_\\\\d+)*))?|\\\\B\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?` }\n    ],\n    relevance: 0\n  };\n  const LITERALS = [\n    \"false\",\n    \"null\",\n    \"true\"\n  ];\n  const KWS = [\n    // Magic constants:\n    // <https://www.php.net/manual/en/language.constants.predefined.php>\n    \"__CLASS__\",\n    \"__DIR__\",\n    \"__FILE__\",\n    \"__FUNCTION__\",\n    \"__COMPILER_HALT_OFFSET__\",\n    \"__LINE__\",\n    \"__METHOD__\",\n    \"__NAMESPACE__\",\n    \"__TRAIT__\",\n    // Function that look like language construct or language construct that look like function:\n    // List of keywords that may not require parenthesis\n    \"die\",\n    \"echo\",\n    \"exit\",\n    \"include\",\n    \"include_once\",\n    \"print\",\n    \"require\",\n    \"require_once\",\n    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table\n    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +\n    // Other keywords:\n    // <https://www.php.net/manual/en/reserved.php>\n    // <https://www.php.net/manual/en/language.types.type-juggling.php>\n    \"array\",\n    \"abstract\",\n    \"and\",\n    \"as\",\n    \"binary\",\n    \"bool\",\n    \"boolean\",\n    \"break\",\n    \"callable\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"clone\",\n    \"const\",\n    \"continue\",\n    \"declare\",\n    \"default\",\n    \"do\",\n    \"double\",\n    \"else\",\n    \"elseif\",\n    \"empty\",\n    \"enddeclare\",\n    \"endfor\",\n    \"endforeach\",\n    \"endif\",\n    \"endswitch\",\n    \"endwhile\",\n    \"enum\",\n    \"eval\",\n    \"extends\",\n    \"final\",\n    \"finally\",\n    \"float\",\n    \"for\",\n    \"foreach\",\n    \"from\",\n    \"global\",\n    \"goto\",\n    \"if\",\n    \"implements\",\n    \"instanceof\",\n    \"insteadof\",\n    \"int\",\n    \"integer\",\n    \"interface\",\n    \"isset\",\n    \"iterable\",\n    \"list\",\n    \"match|0\",\n    \"mixed\",\n    \"new\",\n    \"never\",\n    \"object\",\n    \"or\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"readonly\",\n    \"real\",\n    \"return\",\n    \"string\",\n    \"switch\",\n    \"throw\",\n    \"trait\",\n    \"try\",\n    \"unset\",\n    \"use\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"xor\",\n    \"yield\"\n  ];\n\n  const BUILT_INS = [\n    // Standard PHP library:\n    // <https://www.php.net/manual/en/book.spl.php>\n    \"Error|0\",\n    \"AppendIterator\",\n    \"ArgumentCountError\",\n    \"ArithmeticError\",\n    \"ArrayIterator\",\n    \"ArrayObject\",\n    \"AssertionError\",\n    \"BadFunctionCallException\",\n    \"BadMethodCallException\",\n    \"CachingIterator\",\n    \"CallbackFilterIterator\",\n    \"CompileError\",\n    \"Countable\",\n    \"DirectoryIterator\",\n    \"DivisionByZeroError\",\n    \"DomainException\",\n    \"EmptyIterator\",\n    \"ErrorException\",\n    \"Exception\",\n    \"FilesystemIterator\",\n    \"FilterIterator\",\n    \"GlobIterator\",\n    \"InfiniteIterator\",\n    \"InvalidArgumentException\",\n    \"IteratorIterator\",\n    \"LengthException\",\n    \"LimitIterator\",\n    \"LogicException\",\n    \"MultipleIterator\",\n    \"NoRewindIterator\",\n    \"OutOfBoundsException\",\n    \"OutOfRangeException\",\n    \"OuterIterator\",\n    \"OverflowException\",\n    \"ParentIterator\",\n    \"ParseError\",\n    \"RangeException\",\n    \"RecursiveArrayIterator\",\n    \"RecursiveCachingIterator\",\n    \"RecursiveCallbackFilterIterator\",\n    \"RecursiveDirectoryIterator\",\n    \"RecursiveFilterIterator\",\n    \"RecursiveIterator\",\n    \"RecursiveIteratorIterator\",\n    \"RecursiveRegexIterator\",\n    \"RecursiveTreeIterator\",\n    \"RegexIterator\",\n    \"RuntimeException\",\n    \"SeekableIterator\",\n    \"SplDoublyLinkedList\",\n    \"SplFileInfo\",\n    \"SplFileObject\",\n    \"SplFixedArray\",\n    \"SplHeap\",\n    \"SplMaxHeap\",\n    \"SplMinHeap\",\n    \"SplObjectStorage\",\n    \"SplObserver\",\n    \"SplPriorityQueue\",\n    \"SplQueue\",\n    \"SplStack\",\n    \"SplSubject\",\n    \"SplTempFileObject\",\n    \"TypeError\",\n    \"UnderflowException\",\n    \"UnexpectedValueException\",\n    \"UnhandledMatchError\",\n    // Reserved interfaces:\n    // <https://www.php.net/manual/en/reserved.interfaces.php>\n    \"ArrayAccess\",\n    \"BackedEnum\",\n    \"Closure\",\n    \"Fiber\",\n    \"Generator\",\n    \"Iterator\",\n    \"IteratorAggregate\",\n    \"Serializable\",\n    \"Stringable\",\n    \"Throwable\",\n    \"Traversable\",\n    \"UnitEnum\",\n    \"WeakReference\",\n    \"WeakMap\",\n    // Reserved classes:\n    // <https://www.php.net/manual/en/reserved.classes.php>\n    \"Directory\",\n    \"__PHP_Incomplete_Class\",\n    \"parent\",\n    \"php_user_filter\",\n    \"self\",\n    \"static\",\n    \"stdClass\"\n  ];\n\n  /** Dual-case keywords\n   *\n   * [\"then\",\"FILE\"] =>\n   *     [\"then\", \"THEN\", \"FILE\", \"file\"]\n   *\n   * @param {string[]} items */\n  const dualCase = (items) => {\n    /** @type string[] */\n    const result = [];\n    items.forEach(item => {\n      result.push(item);\n      if (item.toLowerCase() === item) {\n        result.push(item.toUpperCase());\n      } else {\n        result.push(item.toLowerCase());\n      }\n    });\n    return result;\n  };\n\n  const KEYWORDS = {\n    keyword: KWS,\n    literal: dualCase(LITERALS),\n    built_in: BUILT_INS,\n  };\n\n  /**\n   * @param {string[]} items */\n  const normalizeKeywords = (items) => {\n    return items.map(item => {\n      return item.replace(/\\|\\d+$/, \"\");\n    });\n  };\n\n  const CONSTRUCTOR_CALL = { variants: [\n    {\n      match: [\n        /new/,\n        regex.concat(WHITESPACE, \"+\"),\n        // to prevent built ins from being confused as the class constructor call\n        regex.concat(\"(?!\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n        PASCAL_CASE_CLASS_NAME_RE,\n      ],\n      scope: {\n        1: \"keyword\",\n        4: \"title.class\",\n      },\n    }\n  ] };\n\n  const CONSTANT_REFERENCE = regex.concat(IDENT_RE, \"\\\\b(?!\\\\()\");\n\n  const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [\n    {\n      match: [\n        regex.concat(\n          /::/,\n          regex.lookahead(/(?!class\\b)/)\n        ),\n        CONSTANT_REFERENCE,\n      ],\n      scope: { 2: \"variable.constant\", },\n    },\n    {\n      match: [\n        /::/,\n        /class/,\n      ],\n      scope: { 2: \"variable.language\", },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        regex.concat(\n          /::/,\n          regex.lookahead(/(?!class\\b)/)\n        ),\n        CONSTANT_REFERENCE,\n      ],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.constant\",\n      },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        regex.concat(\n          \"::\",\n          regex.lookahead(/(?!class\\b)/)\n        ),\n      ],\n      scope: { 1: \"title.class\", },\n    },\n    {\n      match: [\n        PASCAL_CASE_CLASS_NAME_RE,\n        /::/,\n        /class/,\n      ],\n      scope: {\n        1: \"title.class\",\n        3: \"variable.language\",\n      },\n    }\n  ] };\n\n  const NAMED_ARGUMENT = {\n    scope: 'attr',\n    match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),\n  };\n  const PARAMS_MODE = {\n    relevance: 0,\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      NAMED_ARGUMENT,\n      VARIABLE,\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n      hljs.C_BLOCK_COMMENT_MODE,\n      STRING,\n      NUMBER,\n      CONSTRUCTOR_CALL,\n    ],\n  };\n  const FUNCTION_INVOKE = {\n    relevance: 0,\n    match: [\n      /\\b/,\n      // to prevent keywords from being confused as the function title\n      regex.concat(\"(?!fn\\\\b|function\\\\b|\", normalizeKeywords(KWS).join(\"\\\\b|\"), \"|\", normalizeKeywords(BUILT_INS).join(\"\\\\b|\"), \"\\\\b)\"),\n      IDENT_RE,\n      regex.concat(WHITESPACE, \"*\"),\n      regex.lookahead(/(?=\\()/)\n    ],\n    scope: { 3: \"title.function.invoke\", },\n    contains: [ PARAMS_MODE ]\n  };\n  PARAMS_MODE.contains.push(FUNCTION_INVOKE);\n\n  const ATTRIBUTE_CONTAINS = [\n    NAMED_ARGUMENT,\n    LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING,\n    NUMBER,\n    CONSTRUCTOR_CALL,\n  ];\n\n  const ATTRIBUTES = {\n    begin: regex.concat(/#\\[\\s*/, PASCAL_CASE_CLASS_NAME_RE),\n    beginScope: \"meta\",\n    end: /]/,\n    endScope: \"meta\",\n    keywords: {\n      literal: LITERALS,\n      keyword: [\n        'new',\n        'array',\n      ]\n    },\n    contains: [\n      {\n        begin: /\\[/,\n        end: /]/,\n        keywords: {\n          literal: LITERALS,\n          keyword: [\n            'new',\n            'array',\n          ]\n        },\n        contains: [\n          'self',\n          ...ATTRIBUTE_CONTAINS,\n        ]\n      },\n      ...ATTRIBUTE_CONTAINS,\n      {\n        scope: 'meta',\n        match: PASCAL_CASE_CLASS_NAME_RE\n      }\n    ]\n  };\n\n  return {\n    case_insensitive: false,\n    keywords: KEYWORDS,\n    contains: [\n      ATTRIBUTES,\n      hljs.HASH_COMMENT_MODE,\n      hljs.COMMENT('//', '$'),\n      hljs.COMMENT(\n        '/\\\\*',\n        '\\\\*/',\n        { contains: [\n          {\n            scope: 'doctag',\n            match: '@[A-Za-z]+'\n          }\n        ] }\n      ),\n      {\n        match: /__halt_compiler\\(\\);/,\n        keywords: '__halt_compiler',\n        starts: {\n          scope: \"comment\",\n          end: hljs.MATCH_NOTHING_RE,\n          contains: [\n            {\n              match: /\\?>/,\n              scope: \"meta\",\n              endsParent: true\n            }\n          ]\n        }\n      },\n      PREPROCESSOR,\n      {\n        scope: 'variable.language',\n        match: /\\$this\\b/\n      },\n      VARIABLE,\n      FUNCTION_INVOKE,\n      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n      {\n        match: [\n          /const/,\n          /\\s/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"variable.constant\",\n        },\n      },\n      CONSTRUCTOR_CALL,\n      {\n        scope: 'function',\n        relevance: 0,\n        beginKeywords: 'fn function',\n        end: /[;{]/,\n        excludeEnd: true,\n        illegal: '[$%\\\\[]',\n        contains: [\n          { beginKeywords: 'use', },\n          hljs.UNDERSCORE_TITLE_MODE,\n          {\n            begin: '=>', // No markup, just a relevance booster\n            endsParent: true\n          },\n          {\n            scope: 'params',\n            begin: '\\\\(',\n            end: '\\\\)',\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS,\n            contains: [\n              'self',\n              VARIABLE,\n              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          },\n        ]\n      },\n      {\n        scope: 'class',\n        variants: [\n          {\n            beginKeywords: \"enum\",\n            illegal: /[($\"]/\n          },\n          {\n            beginKeywords: \"class interface trait\",\n            illegal: /[:($\"]/\n          }\n        ],\n        relevance: 0,\n        end: /\\{/,\n        excludeEnd: true,\n        contains: [\n          { beginKeywords: 'extends implements' },\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      // both use and namespace still use \"old style\" rules (vs multi-match)\n      // because the namespace name can include `\\` and we still want each\n      // element to be treated as its own *individual* title\n      {\n        beginKeywords: 'namespace',\n        relevance: 0,\n        end: ';',\n        illegal: /[.']/,\n        contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: \"title.class\" }) ]\n      },\n      {\n        beginKeywords: 'use',\n        relevance: 0,\n        end: ';',\n        contains: [\n          // TODO: title.function vs title.class\n          {\n            match: /\\b(as|const|function)\\b/,\n            scope: \"keyword\"\n          },\n          // TODO: could be title.class or title.function\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      STRING,\n      NUMBER,\n    ]\n  };\n}\n\nmodule.exports = php;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}