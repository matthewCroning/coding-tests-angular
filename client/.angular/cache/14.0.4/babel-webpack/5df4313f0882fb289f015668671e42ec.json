{"ast":null,"code":"/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&\\'';\n  const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in: // Clojure keywords\n    globals + ' ' + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem ' + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' + 'monitor-exit macroexpand macroexpand-1 for dosync and or ' + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' + 'peek pop doto proxy first rest cons cast coll last butlast ' + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import ' + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    scope: 'number',\n    relevance: 0,\n    variants: [{\n      match: /[-+]?0[xX][0-9a-fA-F]+N?/\n    }, // hexadecimal                 // 0x2a\n    {\n      match: /[-+]?0[0-7]+N?/\n    }, // octal                       // 052\n    {\n      match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/\n    }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16\n    {\n      match: /[-+]?[0-9]+\\/[0-9]+N?/\n    }, // ratio                       // 1/2\n    {\n      match: /[-+]?[0-9]+((\\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/\n    }, // float        // 0.42 4.2E-1M 42E1 42M\n    {\n      match: /[-+]?([1-9][0-9]*|0)N?/\n    } // int (don't match leading 0) // 42 42N\n    ]\n  };\n  const CHARACTER = {\n    scope: 'character',\n    variants: [{\n      match: /\\\\o[0-3]?[0-7]{1,2}/\n    }, // Unicode Octal 0 - 377\n    {\n      match: /\\\\u[0-9a-fA-F]{4}/\n    }, // Unicode Hex 0000 - FFFF\n    {\n      match: /\\\\(newline|space|tab|formfeed|backspace|return)/\n    }, // special characters\n    {\n      match: /\\\\\\S/,\n      relevance: 0\n    } // any non-whitespace char\n    ]\n  };\n  const REGEX = {\n    scope: 'regex',\n    begin: /#\"/,\n    end: /\"/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMA = {\n    scope: 'punctuation',\n    match: /,/,\n    relevance: 0\n  };\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: \"\\\\[|(#::?\" + SYMBOL_RE + \")?\\\\{\",\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [COMMA, LIST, CHARACTER, REGEX, STRING, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n  const GLOBAL = {\n    beginKeywords: globals,\n    keywords: {\n      $pattern: SYMBOL_RE,\n      keyword: globals\n    },\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [{\n      className: 'title',\n      begin: SYMBOL_RE,\n      relevance: 0,\n      excludeEnd: true,\n      // we can only have a single title\n      endsParent: true\n    }].concat(DEFAULT_CONTAINS)\n  };\n  LIST.contains = [GLOBAL, NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  return {\n    name: 'Clojure',\n    aliases: ['clj', 'edn'],\n    illegal: /\\S/,\n    contains: [COMMA, LIST, CHARACTER, REGEX, STRING, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n}\n\nmodule.exports = clojure;","map":{"version":3,"names":["clojure","hljs","SYMBOLSTART","SYMBOL_RE","globals","keywords","$pattern","built_in","SYMBOL","begin","relevance","NUMBER","scope","variants","match","CHARACTER","REGEX","end","contains","BACKSLASH_ESCAPE","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMA","COMMENT","LITERAL","className","COLLECTION","KEY","LIST","BODY","endsWithParent","NAME","starts","DEFAULT_CONTAINS","GLOBAL","beginKeywords","keyword","excludeEnd","endsParent","concat","name","aliases","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/clojure.js"],"sourcesContent":["/*\nLanguage: Clojure\nDescription: Clojure syntax (based on lisp.js)\nAuthor: mfornos\nWebsite: https://clojure.org\nCategory: lisp\n*/\n\n/** @type LanguageFn */\nfunction clojure(hljs) {\n  const SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&\\'';\n  const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';\n  const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';\n  const keywords = {\n    $pattern: SYMBOL_RE,\n    built_in:\n      // Clojure keywords\n      globals + ' '\n      + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem '\n      + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '\n      + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '\n      + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '\n      + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '\n      + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '\n      + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '\n      + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '\n      + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '\n      + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '\n      + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '\n      + 'monitor-exit macroexpand macroexpand-1 for dosync and or '\n      + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '\n      + 'peek pop doto proxy first rest cons cast coll last butlast '\n      + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import '\n      + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '\n      + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '\n      + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '\n      + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '\n      + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '\n      + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '\n      + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '\n      + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '\n      + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '\n      + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '\n      + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '\n      + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n\n  const SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  const NUMBER = {\n    scope: 'number',\n    relevance: 0,\n    variants: [\n      { match: /[-+]?0[xX][0-9a-fA-F]+N?/ }, // hexadecimal                 // 0x2a\n      { match: /[-+]?0[0-7]+N?/ }, // octal                       // 052\n      { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16\n      { match: /[-+]?[0-9]+\\/[0-9]+N?/ }, // ratio                       // 1/2\n      { match: /[-+]?[0-9]+((\\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ }, // float        // 0.42 4.2E-1M 42E1 42M\n      { match: /[-+]?([1-9][0-9]*|0)N?/ }, // int (don't match leading 0) // 42 42N\n    ]\n  };\n  const CHARACTER = {\n    scope: 'character',\n    variants: [\n      { match: /\\\\o[0-3]?[0-7]{1,2}/ }, // Unicode Octal 0 - 377\n      { match: /\\\\u[0-9a-fA-F]{4}/ }, // Unicode Hex 0000 - FFFF\n      { match: /\\\\(newline|space|tab|formfeed|backspace|return)/ }, // special characters\n      {\n        match: /\\\\\\S/,\n        relevance: 0\n      } // any non-whitespace char\n    ]\n  };\n  const REGEX = {\n    scope: 'regex',\n    begin: /#\"/,\n    end: /\"/,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMA = {\n    scope: 'punctuation',\n    match: /,/,\n    relevance: 0\n  };\n  const COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    { relevance: 0 }\n  );\n  const LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  const COLLECTION = {\n    begin: \"\\\\[|(#::?\" + SYMBOL_RE + \")?\\\\{\",\n    end: '[\\\\]\\\\}]',\n    relevance: 0\n  };\n  const KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const NAME = {\n    keywords: keywords,\n    className: 'name',\n    begin: SYMBOL_RE,\n    relevance: 0,\n    starts: BODY\n  };\n  const DEFAULT_CONTAINS = [\n    COMMA,\n    LIST,\n    CHARACTER,\n    REGEX,\n    STRING,\n    COMMENT,\n    KEY,\n    COLLECTION,\n    NUMBER,\n    LITERAL,\n    SYMBOL\n  ];\n\n  const GLOBAL = {\n    beginKeywords: globals,\n    keywords: {\n      $pattern: SYMBOL_RE,\n      keyword: globals\n    },\n    end: '(\\\\[|#|\\\\d|\"|:|\\\\{|\\\\)|\\\\(|$)',\n    contains: [\n      {\n        className: 'title',\n        begin: SYMBOL_RE,\n        relevance: 0,\n        excludeEnd: true,\n        // we can only have a single title\n        endsParent: true\n      }\n    ].concat(DEFAULT_CONTAINS)\n  };\n\n  LIST.contains = [\n    GLOBAL,\n    NAME,\n    BODY\n  ];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Clojure',\n    aliases: [\n      'clj',\n      'edn'\n    ],\n    illegal: /\\S/,\n    contains: [\n      COMMA,\n      LIST,\n      CHARACTER,\n      REGEX,\n      STRING,\n      COMMENT,\n      KEY,\n      COLLECTION,\n      NUMBER,\n      LITERAL\n    ]\n  };\n}\n\nmodule.exports = clojure;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}