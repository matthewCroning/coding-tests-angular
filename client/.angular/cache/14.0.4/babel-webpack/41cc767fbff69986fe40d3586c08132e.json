{"ast":null,"code":"/*\nLanguage: Device Tree\nDescription: *.dts files used in the Linux kernel\nAuthor: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>\nWebsite: https://elinux.org/Device_Tree_Reference\nCategory: config\n*/\n\n/** @type LanguageFn */\nfunction dts(hljs) {\n  const STRINGS = {\n    className: 'string',\n    variants: [hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      begin: '((u8?|U)|L)?\"'\n    }), {\n      begin: '(u8?|U)?R\"',\n      end: '\"',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '\\'\\\\\\\\?.',\n      end: '\\'',\n      illegal: '.'\n    }]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(u|U|l|L|ul|UL|f|F)'\n    }, {\n      begin: hljs.C_NUMBER_RE\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '#',\n    end: '$',\n    keywords: {\n      keyword: 'if else elif endif define undef ifdef ifndef'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, {\n      beginKeywords: 'include',\n      end: '$',\n      keywords: {\n        keyword: 'include'\n      },\n      contains: [hljs.inherit(STRINGS, {\n        className: 'string'\n      }), {\n        className: 'string',\n        begin: '<',\n        end: '>',\n        illegal: '\\\\n'\n      }]\n    }, STRINGS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const REFERENCE = {\n    className: 'variable',\n    begin: /&[a-z\\d_]*\\b/\n  };\n  const KEYWORD = {\n    className: 'keyword',\n    begin: '/[a-z][a-z\\\\d-]*/'\n  };\n  const LABEL = {\n    className: 'symbol',\n    begin: '^\\\\s*[a-zA-Z_][a-zA-Z\\\\d_]*:'\n  };\n  const CELL_PROPERTY = {\n    className: 'params',\n    relevance: 0,\n    begin: '<',\n    end: '>',\n    contains: [NUMBERS, REFERENCE]\n  };\n  const NODE = {\n    className: 'title.class',\n    begin: /[a-zA-Z_][a-zA-Z\\d_@-]*(?=\\s\\{)/,\n    relevance: 0.2\n  };\n  const ROOT_NODE = {\n    className: 'title.class',\n    begin: /^\\/(?=\\s*\\{)/,\n    relevance: 10\n  }; // TODO: `attribute` might be the right scope here, unsure\n  // I'm not sure if all these key names have semantic meaning or not\n\n  const ATTR_NO_VALUE = {\n    match: /[a-z][a-z-,]+(?=;)/,\n    relevance: 0,\n    scope: \"attr\"\n  };\n  const ATTR = {\n    relevance: 0,\n    match: [/[a-z][a-z-,]+/, /\\s*/, /=/],\n    scope: {\n      1: \"attr\",\n      3: \"operator\"\n    }\n  };\n  const PUNC = {\n    scope: \"punctuation\",\n    relevance: 0,\n    // `};` combined is just to avoid tons of useless punctuation nodes\n    match: /\\};|[;{}]/\n  };\n  return {\n    name: 'Device Tree',\n    contains: [ROOT_NODE, REFERENCE, KEYWORD, LABEL, NODE, ATTR, ATTR_NO_VALUE, CELL_PROPERTY, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS, PREPROCESSOR, PUNC, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: \"\"\n    }]\n  };\n}\n\nmodule.exports = dts;","map":{"version":3,"names":["dts","hljs","STRINGS","className","variants","inherit","QUOTE_STRING_MODE","begin","end","contains","BACKSLASH_ESCAPE","illegal","NUMBERS","C_NUMBER_RE","relevance","PREPROCESSOR","keywords","keyword","beginKeywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","REFERENCE","KEYWORD","LABEL","CELL_PROPERTY","NODE","ROOT_NODE","ATTR_NO_VALUE","match","scope","ATTR","PUNC","name","IDENT_RE","module","exports"],"sources":["C:/Users/Matth/workspace/compiler/client/node_modules/highlight.js/lib/languages/dts.js"],"sourcesContent":["/*\nLanguage: Device Tree\nDescription: *.dts files used in the Linux kernel\nAuthor: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>\nWebsite: https://elinux.org/Device_Tree_Reference\nCategory: config\n*/\n\n/** @type LanguageFn */\nfunction dts(hljs) {\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?\"' }),\n      {\n        begin: '(u8?|U)?R\"',\n        end: '\"',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '\\'\\\\\\\\?.',\n        end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(u|U|l|L|ul|UL|f|F)' },\n      { begin: hljs.C_NUMBER_RE }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '#',\n    end: '$',\n    keywords: { keyword: 'if else elif endif define undef ifdef ifndef' },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      {\n        beginKeywords: 'include',\n        end: '$',\n        keywords: { keyword: 'include' },\n        contains: [\n          hljs.inherit(STRINGS, { className: 'string' }),\n          {\n            className: 'string',\n            begin: '<',\n            end: '>',\n            illegal: '\\\\n'\n          }\n        ]\n      },\n      STRINGS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const REFERENCE = {\n    className: 'variable',\n    begin: /&[a-z\\d_]*\\b/\n  };\n\n  const KEYWORD = {\n    className: 'keyword',\n    begin: '/[a-z][a-z\\\\d-]*/'\n  };\n\n  const LABEL = {\n    className: 'symbol',\n    begin: '^\\\\s*[a-zA-Z_][a-zA-Z\\\\d_]*:'\n  };\n\n  const CELL_PROPERTY = {\n    className: 'params',\n    relevance: 0,\n    begin: '<',\n    end: '>',\n    contains: [\n      NUMBERS,\n      REFERENCE\n    ]\n  };\n\n  const NODE = {\n    className: 'title.class',\n    begin: /[a-zA-Z_][a-zA-Z\\d_@-]*(?=\\s\\{)/,\n    relevance: 0.2\n  };\n\n  const ROOT_NODE = {\n    className: 'title.class',\n    begin: /^\\/(?=\\s*\\{)/,\n    relevance: 10\n  };\n\n  // TODO: `attribute` might be the right scope here, unsure\n  // I'm not sure if all these key names have semantic meaning or not\n  const ATTR_NO_VALUE = {\n    match: /[a-z][a-z-,]+(?=;)/,\n    relevance: 0,\n    scope: \"attr\"\n  };\n  const ATTR = {\n    relevance: 0,\n    match: [\n      /[a-z][a-z-,]+/,\n      /\\s*/,\n      /=/\n    ],\n    scope: {\n      1: \"attr\",\n      3: \"operator\"\n    }\n  };\n\n  const PUNC = {\n    scope: \"punctuation\",\n    relevance: 0,\n    // `};` combined is just to avoid tons of useless punctuation nodes\n    match: /\\};|[;{}]/\n  };\n\n  return {\n    name: 'Device Tree',\n    contains: [\n      ROOT_NODE,\n      REFERENCE,\n      KEYWORD,\n      LABEL,\n      NODE,\n      ATTR,\n      ATTR_NO_VALUE,\n      CELL_PROPERTY,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBERS,\n      STRINGS,\n      PREPROCESSOR,\n      PUNC,\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: \"\"\n      }\n    ]\n  };\n}\n\nmodule.exports = dts;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}